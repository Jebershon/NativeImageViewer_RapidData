// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testnativefiledocuments.proxies;

public class WriteTextFileContext implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject writeTextFileContextMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "TestNativeFileDocuments.WriteTextFileContext";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Text("Text"),
		Filename("Filename"),
		Append("Append"),
		FolderName("FolderName"),
		OfflineDebug("OfflineDebug");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public WriteTextFileContext(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected WriteTextFileContext(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject writeTextFileContextMendixObject)
	{
		if (writeTextFileContextMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, writeTextFileContextMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.writeTextFileContextMendixObject = writeTextFileContextMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static testnativefiledocuments.proxies.WriteTextFileContext initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new testnativefiledocuments.proxies.WriteTextFileContext(context, mendixObject);
	}

	public static testnativefiledocuments.proxies.WriteTextFileContext load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return testnativefiledocuments.proxies.WriteTextFileContext.initialize(context, mendixObject);
	}

	/**
	 * @return value of Text
	 */
	public final java.lang.String getText()
	{
		return getText(getContext());
	}

	/**
	 * @param context
	 * @return value of Text
	 */
	public final java.lang.String getText(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Text.toString());
	}

	/**
	 * Set value of Text
	 * @param text
	 */
	public final void setText(java.lang.String text)
	{
		setText(getContext(), text);
	}

	/**
	 * Set value of Text
	 * @param context
	 * @param text
	 */
	public final void setText(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String text)
	{
		getMendixObject().setValue(context, MemberNames.Text.toString(), text);
	}

	/**
	 * @return value of Filename
	 */
	public final java.lang.String getFilename()
	{
		return getFilename(getContext());
	}

	/**
	 * @param context
	 * @return value of Filename
	 */
	public final java.lang.String getFilename(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Filename.toString());
	}

	/**
	 * Set value of Filename
	 * @param filename
	 */
	public final void setFilename(java.lang.String filename)
	{
		setFilename(getContext(), filename);
	}

	/**
	 * Set value of Filename
	 * @param context
	 * @param filename
	 */
	public final void setFilename(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String filename)
	{
		getMendixObject().setValue(context, MemberNames.Filename.toString(), filename);
	}

	/**
	 * @return value of Append
	 */
	public final java.lang.Boolean getAppend()
	{
		return getAppend(getContext());
	}

	/**
	 * @param context
	 * @return value of Append
	 */
	public final java.lang.Boolean getAppend(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Append.toString());
	}

	/**
	 * Set value of Append
	 * @param append
	 */
	public final void setAppend(java.lang.Boolean append)
	{
		setAppend(getContext(), append);
	}

	/**
	 * Set value of Append
	 * @param context
	 * @param append
	 */
	public final void setAppend(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean append)
	{
		getMendixObject().setValue(context, MemberNames.Append.toString(), append);
	}

	/**
	 * @return value of FolderName
	 */
	public final java.lang.String getFolderName()
	{
		return getFolderName(getContext());
	}

	/**
	 * @param context
	 * @return value of FolderName
	 */
	public final java.lang.String getFolderName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.FolderName.toString());
	}

	/**
	 * Set value of FolderName
	 * @param foldername
	 */
	public final void setFolderName(java.lang.String foldername)
	{
		setFolderName(getContext(), foldername);
	}

	/**
	 * Set value of FolderName
	 * @param context
	 * @param foldername
	 */
	public final void setFolderName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String foldername)
	{
		getMendixObject().setValue(context, MemberNames.FolderName.toString(), foldername);
	}

	/**
	 * @return value of OfflineDebug
	 */
	public final java.lang.Boolean getOfflineDebug()
	{
		return getOfflineDebug(getContext());
	}

	/**
	 * @param context
	 * @return value of OfflineDebug
	 */
	public final java.lang.Boolean getOfflineDebug(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.OfflineDebug.toString());
	}

	/**
	 * Set value of OfflineDebug
	 * @param offlinedebug
	 */
	public final void setOfflineDebug(java.lang.Boolean offlinedebug)
	{
		setOfflineDebug(getContext(), offlinedebug);
	}

	/**
	 * Set value of OfflineDebug
	 * @param context
	 * @param offlinedebug
	 */
	public final void setOfflineDebug(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean offlinedebug)
	{
		getMendixObject().setValue(context, MemberNames.OfflineDebug.toString(), offlinedebug);
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return writeTextFileContextMendixObject;
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testnativefiledocuments.proxies.WriteTextFileContext that = (testnativefiledocuments.proxies.WriteTextFileContext) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
