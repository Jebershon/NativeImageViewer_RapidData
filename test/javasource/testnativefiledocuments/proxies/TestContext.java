// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testnativefiledocuments.proxies;

public class TestContext implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject testContextMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "TestNativeFileDocuments.TestContext";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		DirectoryExists("DirectoryExists"),
		OfflineDebug("OfflineDebug"),
		FullPath("FullPath");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public TestContext(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected TestContext(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject testContextMendixObject)
	{
		if (testContextMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, testContextMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.testContextMendixObject = testContextMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static testnativefiledocuments.proxies.TestContext initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new testnativefiledocuments.proxies.TestContext(context, mendixObject);
	}

	public static testnativefiledocuments.proxies.TestContext load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return testnativefiledocuments.proxies.TestContext.initialize(context, mendixObject);
	}

	/**
	 * @return value of DirectoryExists
	 */
	public final java.lang.Boolean getDirectoryExists()
	{
		return getDirectoryExists(getContext());
	}

	/**
	 * @param context
	 * @return value of DirectoryExists
	 */
	public final java.lang.Boolean getDirectoryExists(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.DirectoryExists.toString());
	}

	/**
	 * Set value of DirectoryExists
	 * @param directoryexists
	 */
	public final void setDirectoryExists(java.lang.Boolean directoryexists)
	{
		setDirectoryExists(getContext(), directoryexists);
	}

	/**
	 * Set value of DirectoryExists
	 * @param context
	 * @param directoryexists
	 */
	public final void setDirectoryExists(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean directoryexists)
	{
		getMendixObject().setValue(context, MemberNames.DirectoryExists.toString(), directoryexists);
	}

	/**
	 * @return value of OfflineDebug
	 */
	public final java.lang.Boolean getOfflineDebug()
	{
		return getOfflineDebug(getContext());
	}

	/**
	 * @param context
	 * @return value of OfflineDebug
	 */
	public final java.lang.Boolean getOfflineDebug(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.OfflineDebug.toString());
	}

	/**
	 * Set value of OfflineDebug
	 * @param offlinedebug
	 */
	public final void setOfflineDebug(java.lang.Boolean offlinedebug)
	{
		setOfflineDebug(getContext(), offlinedebug);
	}

	/**
	 * Set value of OfflineDebug
	 * @param context
	 * @param offlinedebug
	 */
	public final void setOfflineDebug(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean offlinedebug)
	{
		getMendixObject().setValue(context, MemberNames.OfflineDebug.toString(), offlinedebug);
	}

	/**
	 * @return value of FullPath
	 */
	public final java.lang.String getFullPath()
	{
		return getFullPath(getContext());
	}

	/**
	 * @param context
	 * @return value of FullPath
	 */
	public final java.lang.String getFullPath(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.FullPath.toString());
	}

	/**
	 * Set value of FullPath
	 * @param fullpath
	 */
	public final void setFullPath(java.lang.String fullpath)
	{
		setFullPath(getContext(), fullpath);
	}

	/**
	 * Set value of FullPath
	 * @param context
	 * @param fullpath
	 */
	public final void setFullPath(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String fullpath)
	{
		getMendixObject().setValue(context, MemberNames.FullPath.toString(), fullpath);
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return testContextMendixObject;
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testnativefiledocuments.proxies.TestContext that = (testnativefiledocuments.proxies.TestContext) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
