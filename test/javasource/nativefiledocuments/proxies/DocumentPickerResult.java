// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package nativefiledocuments.proxies;

public class DocumentPickerResult implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject documentPickerResultMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "NativeFileDocuments.DocumentPickerResult";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		DocumentPicked("DocumentPicked"),
		Name("Name"),
		Uri("Uri"),
		FileType("FileType");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public DocumentPickerResult(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected DocumentPickerResult(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject documentPickerResultMendixObject)
	{
		if (documentPickerResultMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, documentPickerResultMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.documentPickerResultMendixObject = documentPickerResultMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static nativefiledocuments.proxies.DocumentPickerResult initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new nativefiledocuments.proxies.DocumentPickerResult(context, mendixObject);
	}

	public static nativefiledocuments.proxies.DocumentPickerResult load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return nativefiledocuments.proxies.DocumentPickerResult.initialize(context, mendixObject);
	}

	/**
	 * @return value of DocumentPicked
	 */
	public final java.lang.Boolean getDocumentPicked()
	{
		return getDocumentPicked(getContext());
	}

	/**
	 * @param context
	 * @return value of DocumentPicked
	 */
	public final java.lang.Boolean getDocumentPicked(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.DocumentPicked.toString());
	}

	/**
	 * Set value of DocumentPicked
	 * @param documentpicked
	 */
	public final void setDocumentPicked(java.lang.Boolean documentpicked)
	{
		setDocumentPicked(getContext(), documentpicked);
	}

	/**
	 * Set value of DocumentPicked
	 * @param context
	 * @param documentpicked
	 */
	public final void setDocumentPicked(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean documentpicked)
	{
		getMendixObject().setValue(context, MemberNames.DocumentPicked.toString(), documentpicked);
	}

	/**
	 * @return value of Name
	 */
	public final java.lang.String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final java.lang.String getName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(java.lang.String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * @return value of Uri
	 */
	public final java.lang.String getUri()
	{
		return getUri(getContext());
	}

	/**
	 * @param context
	 * @return value of Uri
	 */
	public final java.lang.String getUri(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Uri.toString());
	}

	/**
	 * Set value of Uri
	 * @param uri
	 */
	public final void setUri(java.lang.String uri)
	{
		setUri(getContext(), uri);
	}

	/**
	 * Set value of Uri
	 * @param context
	 * @param uri
	 */
	public final void setUri(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String uri)
	{
		getMendixObject().setValue(context, MemberNames.Uri.toString(), uri);
	}

	/**
	 * @return value of FileType
	 */
	public final java.lang.String getFileType()
	{
		return getFileType(getContext());
	}

	/**
	 * @param context
	 * @return value of FileType
	 */
	public final java.lang.String getFileType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.FileType.toString());
	}

	/**
	 * Set value of FileType
	 * @param filetype
	 */
	public final void setFileType(java.lang.String filetype)
	{
		setFileType(getContext(), filetype);
	}

	/**
	 * Set value of FileType
	 * @param context
	 * @param filetype
	 */
	public final void setFileType(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String filetype)
	{
		getMendixObject().setValue(context, MemberNames.FileType.toString(), filetype);
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return documentPickerResultMendixObject;
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final nativefiledocuments.proxies.DocumentPickerResult that = (nativefiledocuments.proxies.DocumentPickerResult) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
